!function(){"use strict";var n={836:function(n,r,e){var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,":root {\r\n  --animation-timing: 1.5s;\r\n}\r\n\r\n.app-container {\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: relative;\r\n  background-color: transparent;\r\n}\r\n\r\n.buttons-container {\r\n  display: flex;\r\n  gap: 16px;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.node__element--highlight {\r\n  animation: nodeHighlight var(--animation-timing) ease;\r\n}\r\n\r\n@keyframes nodeHighlight {\r\n  0% {\r\n    background-color: #333;\r\n    color: white;\r\n  }\r\n  25% {\r\n    background-color: rgb(138, 245, 255);\r\n    color: #333;\r\n  }\r\n  75% {\r\n    background-color: #333;\r\n    color: white;\r\n  }\r\n  100% {\r\n    background-color: rgb(188, 117, 246);\r\n    color: #212529;\r\n  }\r\n}\r\n","",{version:3,sources:["webpack://./src/projects/js_binary_search_tree/js_binary_search_tree.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;EAC9B,mBAAmB;EACnB,kBAAkB;EAClB,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,qDAAqD;AACvD;;AAEA;EACE;IACE,sBAAsB;IACtB,YAAY;EACd;EACA;IACE,oCAAoC;IACpC,WAAW;EACb;EACA;IACE,sBAAsB;IACtB,YAAY;EACd;EACA;IACE,oCAAoC;IACpC,cAAc;EAChB;AACF",sourcesContent:[":root {\r\n  --animation-timing: 1.5s;\r\n}\r\n\r\n.app-container {\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: relative;\r\n  background-color: transparent;\r\n}\r\n\r\n.buttons-container {\r\n  display: flex;\r\n  gap: 16px;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n\r\n.node__element--highlight {\r\n  animation: nodeHighlight var(--animation-timing) ease;\r\n}\r\n\r\n@keyframes nodeHighlight {\r\n  0% {\r\n    background-color: #333;\r\n    color: white;\r\n  }\r\n  25% {\r\n    background-color: rgb(138, 245, 255);\r\n    color: #333;\r\n  }\r\n  75% {\r\n    background-color: #333;\r\n    color: white;\r\n  }\r\n  100% {\r\n    background-color: rgb(188, 117, 246);\r\n    color: #212529;\r\n  }\r\n}\r\n"],sourceRoot:""}]),r.Z=a},738:function(n,r,e){var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,"html,\r\nbody {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody > main,\r\nbody > .main {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n* {\r\n  outline: none;\r\n}\r\n\r\n.app-container {\r\n  max-width: 600px;\r\n  margin: auto;\r\n  background-color: #f2f2f2;\r\n  padding: 30px;\r\n}\r\n\r\n.app-container h1 {\r\n  text-align: center;\r\n}\r\n\r\n.app-container .box_container {\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  display: flex;\r\n  height: 300px;\r\n  background-color: white;\r\n  max-width: 200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.app-container .box {\r\n  overflow: auto;\r\n}\r\n\r\n.app-container .box .box_item {\r\n  border: 1px solid black;\r\n  padding: 4px 80px;\r\n  text-align: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.app-container .box .box_item.peeking {\r\n  background-color: #333;\r\n  color: white;\r\n}\r\n\r\n.app-container .buttons-container {\r\n  max-width: max-content;\r\n  margin: 30px auto 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.icon::before {\r\n  display: inline-block;\r\n  font-style: normal;\r\n  font-variant: normal;\r\n  text-rendering: auto;\r\n  -webkit-font-smoothing: antialiased;\r\n}\r\n\r\n.icon.icon-arrow-right::before {\r\n  font-family: 'Font Awesome 5 Free';\r\n  font-weight: 900;\r\n  content: '\\f061';\r\n}\r\n\r\n.icon.icon-arrow-left::before {\r\n  font-family: 'Font Awesome 5 Free';\r\n  font-weight: 900;\r\n  content: '\\f060';\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/globals.css"],names:[],mappings:"AAAA;;EAEE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,UAAU;AACZ;;AAEA;;EAEE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,yBAAyB;EACzB,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,yBAAyB;EACzB,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,uBAAuB;EACvB,iBAAiB;EACjB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,wBAAwB;EACxB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,oBAAoB;EACpB,oBAAoB;EACpB,mCAAmC;AACrC;;AAEA;EACE,kCAAkC;EAClC,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,kCAAkC;EAClC,gBAAgB;EAChB,gBAAgB;AAClB",sourcesContent:["html,\r\nbody {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody > main,\r\nbody > .main {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n* {\r\n  outline: none;\r\n}\r\n\r\n.app-container {\r\n  max-width: 600px;\r\n  margin: auto;\r\n  background-color: #f2f2f2;\r\n  padding: 30px;\r\n}\r\n\r\n.app-container h1 {\r\n  text-align: center;\r\n}\r\n\r\n.app-container .box_container {\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  display: flex;\r\n  height: 300px;\r\n  background-color: white;\r\n  max-width: 200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.app-container .box {\r\n  overflow: auto;\r\n}\r\n\r\n.app-container .box .box_item {\r\n  border: 1px solid black;\r\n  padding: 4px 80px;\r\n  text-align: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.app-container .box .box_item.peeking {\r\n  background-color: #333;\r\n  color: white;\r\n}\r\n\r\n.app-container .buttons-container {\r\n  max-width: max-content;\r\n  margin: 30px auto 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.icon::before {\r\n  display: inline-block;\r\n  font-style: normal;\r\n  font-variant: normal;\r\n  text-rendering: auto;\r\n  -webkit-font-smoothing: antialiased;\r\n}\r\n\r\n.icon.icon-arrow-right::before {\r\n  font-family: 'Font Awesome 5 Free';\r\n  font-weight: 900;\r\n  content: '\\f061';\r\n}\r\n\r\n.icon.icon-arrow-left::before {\r\n  font-family: 'Font Awesome 5 Free';\r\n  font-weight: 900;\r\n  content: '\\f060';\r\n}\r\n"],sourceRoot:""}]),r.Z=a},203:function(n,r,e){var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,".tree {\r\n  --dark: #333;\r\n  margin-top: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.tree .node {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 20px;\r\n  position: relative;\r\n}\r\n\r\n.tree .node:not(.node--root) > .node__element::before {\r\n  content: '';\r\n  height: 20px;\r\n  width: 1px;\r\n  background-color: #dcdcdc;\r\n  display: block;\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: -20px;\r\n  margin: auto;\r\n}\r\n\r\n.tree .node.node--left {\r\n  margin-right: 10px;\r\n}\r\n\r\n.tree .node.node--right {\r\n  margin-left: 10px;\r\n}\r\n\r\n.tree .node__element {\r\n  cursor: pointer;\r\n  border: 1px solid transparent;\r\n  height: 40px;\r\n  background-color: rgb(188, 117, 246);\r\n  border-radius: 16px;\r\n  min-width: 60px;\r\n  max-width: max-content;\r\n\r\n  padding: 4px 8px;\r\n  font-size: 12px;\r\n  line-height: 32px;\r\n  text-align: center;\r\n}\r\n\r\n.tree .node__bottom-line {\r\n  height: 20px;\r\n  width: 1px;\r\n  background-color: #dcdcdc;\r\n}\r\n\r\n.tree .node__element,\r\n.tree .node__element::before,\r\n.tree .node__children,\r\n.tree .node__bottom-line {\r\n  transition: all ease 0.2s;\r\n}\r\n\r\n.tree .node__children {\r\n  display: flex;\r\n  padding: 20px 0;\r\n  border-top: 1px solid #dcdcdc;\r\n}\r\n\r\n.tree .node__element:hover {\r\n  border-color: var(--dark);\r\n}\r\n\r\n.tree .node__element:hover ~ .node__children .node__element::before {\r\n  width: 2px;\r\n  background-color: var(--dark);\r\n}\r\n\r\n.tree .node__element:hover ~ .node__bottom-line,\r\n.tree .node__element:hover ~ .node__children .node__bottom-line {\r\n  width: 2px;\r\n  background-color: var(--dark);\r\n}\r\n\r\n.tree .node__element:hover ~ .node__children,\r\n.tree .node__element:hover ~ .node__children .node__children {\r\n  border-top-width: 2px;\r\n  border-color: var(--dark);\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/tree.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,UAAU;EACV,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,OAAO;EACP,QAAQ;EACR,UAAU;EACV,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,6BAA6B;EAC7B,YAAY;EACZ,oCAAoC;EACpC,mBAAmB;EACnB,eAAe;EACf,sBAAsB;;EAEtB,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,UAAU;EACV,yBAAyB;AAC3B;;AAEA;;;;EAIE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,eAAe;EACf,6BAA6B;AAC/B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,UAAU;EACV,6BAA6B;AAC/B;;AAEA;;EAEE,UAAU;EACV,6BAA6B;AAC/B;;AAEA;;EAEE,qBAAqB;EACrB,yBAAyB;AAC3B",sourcesContent:[".tree {\r\n  --dark: #333;\r\n  margin-top: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.tree .node {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 20px;\r\n  position: relative;\r\n}\r\n\r\n.tree .node:not(.node--root) > .node__element::before {\r\n  content: '';\r\n  height: 20px;\r\n  width: 1px;\r\n  background-color: #dcdcdc;\r\n  display: block;\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: -20px;\r\n  margin: auto;\r\n}\r\n\r\n.tree .node.node--left {\r\n  margin-right: 10px;\r\n}\r\n\r\n.tree .node.node--right {\r\n  margin-left: 10px;\r\n}\r\n\r\n.tree .node__element {\r\n  cursor: pointer;\r\n  border: 1px solid transparent;\r\n  height: 40px;\r\n  background-color: rgb(188, 117, 246);\r\n  border-radius: 16px;\r\n  min-width: 60px;\r\n  max-width: max-content;\r\n\r\n  padding: 4px 8px;\r\n  font-size: 12px;\r\n  line-height: 32px;\r\n  text-align: center;\r\n}\r\n\r\n.tree .node__bottom-line {\r\n  height: 20px;\r\n  width: 1px;\r\n  background-color: #dcdcdc;\r\n}\r\n\r\n.tree .node__element,\r\n.tree .node__element::before,\r\n.tree .node__children,\r\n.tree .node__bottom-line {\r\n  transition: all ease 0.2s;\r\n}\r\n\r\n.tree .node__children {\r\n  display: flex;\r\n  padding: 20px 0;\r\n  border-top: 1px solid #dcdcdc;\r\n}\r\n\r\n.tree .node__element:hover {\r\n  border-color: var(--dark);\r\n}\r\n\r\n.tree .node__element:hover ~ .node__children .node__element::before {\r\n  width: 2px;\r\n  background-color: var(--dark);\r\n}\r\n\r\n.tree .node__element:hover ~ .node__bottom-line,\r\n.tree .node__element:hover ~ .node__children .node__bottom-line {\r\n  width: 2px;\r\n  background-color: var(--dark);\r\n}\r\n\r\n.tree .node__element:hover ~ .node__children,\r\n.tree .node__element:hover ~ .node__children .node__children {\r\n  border-top-width: 2px;\r\n  border-color: var(--dark);\r\n}\r\n"],sourceRoot:""}]),r.Z=a},645:function(n){n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);t&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),r.push(c))}},r}},15:function(n){function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var t,o,i=[],a=!0,l=!1;try{for(e=e.call(n);!(a=(t=e.next()).done)&&(i.push(t.value),!r||i.length!==r);a=!0);}catch(n){l=!0,o=n}finally{try{a||null==e.return||e.return()}finally{if(l)throw o}}return i}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),A="/*# ".concat(c," */"),s=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(s).concat([A]).join("\n")}return[i].join("\n")}},379:function(n,r,e){var t,o=function(){var n={};return function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[r]=e}return n[r]}}(),i=[];function a(n){for(var r=-1,e=0;e<i.length;e++)if(i[e].identifier===n){r=e;break}return r}function l(n,r){for(var e={},t=[],o=0;o<n.length;o++){var l=n[o],c=r.base?l[0]+r.base:l[0],A=e[c]||0,s="".concat(c," ").concat(A);e[c]=A+1;var d=a(s),u={css:l[1],media:l[2],sourceMap:l[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:s,updater:h(u,r),references:1}),t.push(s)}return t}function c(n){var r=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var i=e.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(n){r.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(r);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(r)}return r}var A,s=(A=[],function(n,r){return A[n]=r,A.filter(Boolean).join("\n")});function d(n,r,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=s(r,o);else{var i=document.createTextNode(o),a=n.childNodes;a[r]&&n.removeChild(a[r]),a.length?n.insertBefore(i,a[r]):n.appendChild(i)}}function u(n,r,e){var t=e.css,o=e.media,i=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var f=null,p=0;function h(n,r){var e,t,o;if(r.singleton){var i=p++;e=f||(f=c(r)),t=d.bind(null,e,i,!1),o=d.bind(null,e,i,!0)}else e=c(r),t=u.bind(null,e,r),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return t(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t(n=r)}else o()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var e=l(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<e.length;t++){var o=a(e[t]);i[o].references--}for(var c=l(n,r),A=0;A<e.length;A++){var s=a(e[A]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}e=c}}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={id:t,exports:{}};return n[t](i,i.exports,e),i.exports}e.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(r,{a:r}),r},e.d=function(n,r){for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},function(){var n=e(379),r=e.n(n),t=e(738),o=(r()(t.Z,{insert:"head",singleton:!1}),t.Z.locals,e(203)),i=(r()(o.Z,{insert:"head",singleton:!1}),o.Z.locals,e(836));function a(n){return function(n){if(Array.isArray(n))return l(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,r){if(n){if("string"==typeof n)return l(n,r);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?l(n,r):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}function c(n,r){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),e.push.apply(e,t)}return e}function A(n,r,e){return r in n?Object.defineProperty(n,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[r]=e,n}function s(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}function d(n,r){for(var e=0;e<r.length;e++){var t=r[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}function u(n,r,e){return r&&d(n.prototype,r),e&&d(n,e),n}r()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var f=function(n,r){return Number(n)==Number(r)?0:Number(n)<Number(r)?-1:1},p=function(){function n(r,e){s(this,n),this.value=r.toString(),this.parent=e||null,this.left=null,this.right=null}return u(n,[{key:"isLeaf",get:function(){return null===this.left&&null===this.right}},{key:"hasChildren",get:function(){return!this.isLeaf}}]),n}(),h=function(){function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:f;s(this,n),A(this,"root",void 0),A(this,"compareFn",void 0),this.root=null,this.compareFn=r}return u(n,[{key:"insert",value:function(n){var r,e=this,t=this.root;return null===t?(this.root=new p(n),this.root):function(){for(;;){var o=e.compareFn(n,t.value);if(0===o)return r=t,t;if(-1===o){if(null===t.left)return r=new p(n,t),t.left=r,!0;t=t.left}else if(1===o){if(null===t.right)return r=new p(n,t),t.right=r,!0;t=t.right}}}()?r:void 0}},{key:"remove",value:function(n,r){if(!(r=r||this.search(n)))return null;var e=null===r.parent,t=null!==r.left&&null!==r.right,o=!e&&r.parent.left===r;if(r.isLeaf)return e?this.root=null:o?r.parent.left=null:r.parent.right=null,r;if(!t){var i=null!==r.left?r.left:r.right;return e?this.root=i:o?r.parent.left=i:r.parent.right=i,i.parent=r.parent,r}var a=this.min(r.right);a.parent.left===a?a.parent.left=null:a.parent.right=null;var l=function(n){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?c(Object(e),!0).forEach((function(r){A(n,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(e,r))}))}return n}({},r);return r.value=a.value,l}},{key:"search",value:function(n){return this.postOrderTraverse().find((function(r){return r.value===n}))}},{key:"min",value:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,r=n;null!==r&&null!==r.left;)r=r.left;return r}},{key:"max",value:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,r=n;null!==r&&null!==r.right;)r=r.right;return r}},{key:"inOrderTraverse",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return null===n||(n.left&&r.push.apply(r,a(this.inOrderTraverse(n.left))),r.push(n),n.right&&r.push.apply(r,a(this.inOrderTraverse(n.right)))),r}},{key:"preOrderTraverse",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return null===n||(r.push(n),n.left&&r.push.apply(r,a(this.preOrderTraverse(n.left))),n.right&&r.push.apply(r,a(this.preOrderTraverse(n.right)))),r}},{key:"postOrderTraverse",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return null===n||(n.left&&r.push.apply(r,a(this.postOrderTraverse(n.left))),n.right&&r.push.apply(r,a(this.postOrderTraverse(n.right))),r.push(n)),r}}]),n}(),m="node__element--highlight",g=null,v=function(n){n.reduce((function(n,r){return n.then((function(){return E(r)}))}),Promise.resolve())},E=function(n){var r=n.value,e=document.querySelector('[data-node-id="'.concat(r,'"]'));return null!==g?(clearTimeout(g),e.classList.remove(m),void(g=null)):(console.log(e),e.classList.add(m),document.querySelectorAll("button").forEach((function(n){n.setAttribute("disabled",!0)})),new Promise((function(n){g=setTimeout((function(){e.classList.remove(m),document.querySelectorAll("button").forEach((function(n){n.removeAttribute("disabled")})),g=null,n()}),300)})))};document.documentElement.style.setProperty("--animation-timing","".concat(.3,"s"));var B=function n(r){if(!r)return"";var e=r.left,t=r.right,o=r.value;return'\n    <div class="node__element" data-node-id="'.concat(o,'">').concat(o,"</div>\n    ").concat(e||t?'\n          <div class="node__bottom-line"></div>\n          <div class="node__children">\n          <div class="node node--left">\n          '.concat(e?n(e):"",'\n          </div>\n          <div class="node node--right">\n          ').concat(t?n(t):"","\n          </div>\n            \n          </div>\n        "):"","\n  ")},b=new h;b.insert(11),b.insert(7),b.insert(5),b.insert(3),b.insert(6),b.insert(9),b.insert(8),b.insert(10),b.insert(15),console.log(b.insert(13)),b.insert(12),b.insert(14),b.insert(20),b.insert(18),b.insert(25),console.log("inOrderTraverse"),console.log(b.inOrderTraverse()),console.log("preOrderTraverse"),console.log(b.preOrderTraverse()),console.log("postOrderTraverse"),console.log(b.postOrderTraverse()),console.log("min",b.min()),console.log("max",b.max()),console.log(b.search(12));var C=function(n,r){document.querySelector(".tree").innerHTML=r(n.root)};console.log("treeData",b),C(b,B),document.querySelector(".tree").innerHTML=B(b.root),function(n,r){var e=document.querySelector("#insertBtn"),t=document.querySelector("#removeElementBtn"),o=document.querySelector("#minValueBtn"),i=document.querySelector("#maxValueBtn"),a=document.querySelector("#searchBtn"),l=document.querySelector("#preOrderTravBtn"),c=document.querySelector("#inOrderTravBtn"),A=document.querySelector("#postOrderTravBtn"),s=document.querySelector("#resetBtn");t.addEventListener("click",(function(){var e=prompt("Enter element to remove from the tree"),t=n.remove(e);t?E(t).then((function(){r(n.root)})):alert("Element not found")})),e.addEventListener("click",(function(){var e=prompt("Enter element to add to tree");if(e){var t=n.insert(e);r(n.root),E(t)}})),o.addEventListener("click",(function(){var r=n.min();r?E(r):alert("Node not found")})),a.addEventListener("click",(function(){var r=prompt("Enter the node value to search in the tree"),e=n.search(r);e?E(e):alert("Node not found")})),i.addEventListener("click",(function(){var r=n.max();r?E(r):alert("Node not found")})),l.addEventListener("click",(function(){var r=n.preOrderTraverse();v(r),console.log(r)})),c.addEventListener("click",(function(){var r=n.inOrderTraverse();v(r),console.log(r)})),A.addEventListener("click",(function(){var r=n.postOrderTraverse();v(r),console.log(r)})),s.addEventListener("click",(function(){E(n.root).then((function(){n.root=null,r(n.root)}))}))}(b,(function(){C(b,B)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdW4td2l0aC1qcy8uL3NyYy9wcm9qZWN0cy9qc19iaW5hcnlfc2VhcmNoX3RyZWUvanNfYmluYXJ5X3NlYXJjaF90cmVlLmNzcyIsIndlYnBhY2s6Ly9mdW4td2l0aC1qcy8uL3NyYy9zdHlsZXMvZ2xvYmFscy5jc3MiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvLi9zcmMvc3R5bGVzL3RyZWUuY3NzIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9mdW4td2l0aC1qcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Z1bi13aXRoLWpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Z1bi13aXRoLWpzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Z1bi13aXRoLWpzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mdW4td2l0aC1qcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3N0eWxlcy9nbG9iYWxzLmNzcz9kYTMwIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3N0eWxlcy90cmVlLmNzcz9jMWQ4Iiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3Byb2plY3RzL2pzX2JpbmFyeV9zZWFyY2hfdHJlZS9qc19iaW5hcnlfc2VhcmNoX3RyZWUuY3NzPzkyYTkiLCJ3ZWJwYWNrOi8vZnVuLXdpdGgtanMvLi9zcmMvcHJvamVjdHMvanNfYmluYXJ5X3NlYXJjaF90cmVlL2pzX2JpbmFyeV9zZWFyY2hfdHJlZS5qcyIsIndlYnBhY2s6Ly9mdW4td2l0aC1qcy8uL3NyYy9wcm9qZWN0cy9qc19iaW5hcnlfc2VhcmNoX3RyZWUvYnN0LXVpLmpzIiwid2VicGFjazovL2Z1bi13aXRoLWpzLy4vc3JjL3Byb2plY3RzL2pzX2JpbmFyeV9zZWFyY2hfdHJlZS9tYWluLmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJkZWZhdWx0Q29tcGFyZU51bWJlckZuIiwiYiIsIk51bWJlciIsIlRyZWVOb2RlIiwicGFyZW50IiwibGVmdCIsInJpZ2h0IiwiaXNMZWFmIiwiY29tcGFyZUZuIiwicm9vdCIsImluc2VydGVkTm9kZSIsIm5vZGUiLCJjb21wYXJpc29uIiwic2VhcmNoIiwibm9kZUlzUm9vdCIsImhhc0JvdGhDaGlsZHJlbiIsImlzTGVmdENoaWxkIiwiY2hpbGQiLCJtaW5SaWdodExlYWYiLCJtaW4iLCJjbG9uZSIsInBvc3RPcmRlclRyYXZlcnNlIiwiZmluZCIsImN1cnJlbnQiLCJ0cmF2ZXJzZWQiLCJpbk9yZGVyVHJhdmVyc2UiLCJwcmVPcmRlclRyYXZlcnNlIiwiSElHSExJR0hUX0NMQVNTIiwiaGlnaGxpZ2h0VGltZXIiLCJ0cmF2ZXJzZVVJTm9kZXMiLCJub2RlcyIsInJlZHVjZSIsInByIiwidGhlbiIsImhpZ2hsaWdodE5vZGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm5vZGVFbGVtZW50IiwiY2xlYXJUaW1lb3V0IiwiY2xhc3NMaXN0IiwiY29uc29sZSIsImxvZyIsImFkZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidG4iLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0UHJvcGVydHkiLCJISUdITElHSFRfVElNRSIsInJlbmRlckJpbmFyeVNlYXJjaFRyZWUiLCJteVRyZWUiLCJCaW5hcnlTZWFyY2hUcmVlIiwibWF4IiwicmVSZW5kZXIiLCJ0cmVlIiwicmVuZGVyIiwiaW5uZXJIVE1MIiwicmVtb3ZlRWxlbWVudEJ0biIsIm1pblZhbHVlQnRuIiwibWF4VmFsdWVCdG4iLCJzZWFyY2hCdG4iLCJwcmVPcmRlclRyYXZCdG4iLCJpbk9yZGVyVHJhdkJ0biIsInBvc3RPcmRlclRyYXZCdG4iLCJyZXNldEJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbGVtZW50IiwicHJvbXB0IiwicmVtb3ZlZEVsIiwiYWxlcnQiLCJzZWFyY2hWYWwiLCJzZWFyY2hlZE5vZGUiLCJhcnJheSIsImluaXRpYXRlSGFuZGxlcnMiXSwibWFwcGluZ3MiOiJrRkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSw4eEJBQSt4QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw0RUFBNEUsTUFBUSxHQUFHLFNBQVcsbVVBQW1VLGVBQWlCLENBQUMsK3hCQUEreEIsV0FBYSxNQUV0a0UsTyxrRENKSUgsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxxa0RBQXNrRCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxzQ0FBc0MsTUFBUSxHQUFHLFNBQVcsbXFCQUFtcUIsZUFBaUIsQ0FBQyxza0RBQXNrRCxXQUFhLE1BRTk4SCxPLGtEQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLCs3REFBZzhELEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG1DQUFtQyxNQUFRLEdBQUcsU0FBVyxvc0JBQW9zQixlQUFpQixDQUFDLGc4REFBZzhELFdBQWEsTUFFaHVKLE8sZ0JDQ0FELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVU4sRUFBdUJLLEdBRXJDLE9BQUlBLEVBQUssR0FDQSxVQUFVRSxPQUFPRixFQUFLLEdBQUksTUFBTUUsT0FBT0QsRUFBUyxL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QU10RCxFQUFPMkMsRUFBS25DLE1BQ2RSLEVBQ0Z1QixFQUFjdkIsR0FFZDBELE1BQU0scUJBR1ZULEVBQVVLLGlCQUFpQixTQUFTLFdBQ2xDLElBQU1LLEVBQVlILE9BQU8sOENBQ25CSSxFQUFlakIsRUFBS3pDLE9BQU95RCxHQUM3QkMsRUFDRnJDLEVBQWNxQyxHQUVkRixNQUFNLHFCQUdWVixFQUFZTSxpQkFBaUIsU0FBUyxXQUNwQyxJQUFNdEQsRUFBTzJDLEVBQUtGLE1BQ2R6QyxFQUNGdUIsRUFBY3ZCLEdBRWQwRCxNQUFNLHFCQUdWUixFQUFnQkksaUJBQWlCLFNBQVMsV0FDeEMsSUFBTU8sRUFBUWxCLEVBQUs1QixtQkFDbkJHLEVBQWdCMkMsR0FDaEJoQyxRQUFRQyxJQUFJK0IsTUFFZFYsRUFBZUcsaUJBQWlCLFNBQVMsV0FDdkMsSUFBTU8sRUFBUWxCLEVBQUs3QixrQkFDbkJJLEVBQWdCMkMsR0FDaEJoQyxRQUFRQyxJQUFJK0IsTUFFZFQsRUFBaUJFLGlCQUFpQixTQUFTLFdBQ3pDLElBQU1PLEVBQVFsQixFQUFLakMsb0JBQ25CUSxFQUFnQjJDLEdBQ2hCaEMsUUFBUUMsSUFBSStCLE1BRWRSLEVBQVNDLGlCQUFpQixTQUFTLFdBQ2pDL0IsRUFBY29CLEVBQUs3QyxNQUFNd0IsTUFBSyxXQUM1QnFCLEVBQUs3QyxLQUFPLEtBQ1o4QyxFQUFPRCxFQUFLN0MsWUN2Q2hCZ0UsQ0FBaUJ2QixHQUFRLFdBQ3ZCRyxFQUFTSCxFQUFRRCxNIiwiZmlsZSI6ImpzX2JpbmFyeV9zZWFyY2hfdHJlZS9qc19iaW5hcnlfc2VhcmNoX3RyZWUuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxyXFxuICAtLWFuaW1hdGlvbi10aW1pbmc6IDEuNXM7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIHtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZ2FwOiAxNnB4O1xcclxcbiAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5ub2RlX19lbGVtZW50LS1oaWdobGlnaHQge1xcclxcbiAgYW5pbWF0aW9uOiBub2RlSGlnaGxpZ2h0IHZhcigtLWFuaW1hdGlvbi10aW1pbmcpIGVhc2U7XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgbm9kZUhpZ2hsaWdodCB7XFxyXFxuICAwJSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIH1cXHJcXG4gIDI1JSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMzgsIDI0NSwgMjU1KTtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxuICB9XFxyXFxuICA3NSUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4OCwgMTE3LCAyNDYpO1xcclxcbiAgICBjb2xvcjogIzIxMjUyOTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3Byb2plY3RzL2pzX2JpbmFyeV9zZWFyY2hfdHJlZS9qc19iaW5hcnlfc2VhcmNoX3RyZWUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixTQUFTO0VBQ1QsZUFBZTtFQUNmLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLHFEQUFxRDtBQUN2RDs7QUFFQTtFQUNFO0lBQ0Usc0JBQXNCO0lBQ3RCLFlBQVk7RUFDZDtFQUNBO0lBQ0Usb0NBQW9DO0lBQ3BDLFdBQVc7RUFDYjtFQUNBO0lBQ0Usc0JBQXNCO0lBQ3RCLFlBQVk7RUFDZDtFQUNBO0lBQ0Usb0NBQW9DO0lBQ3BDLGNBQWM7RUFDaEI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxyXFxuICAtLWFuaW1hdGlvbi10aW1pbmc6IDEuNXM7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIHtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZ2FwOiAxNnB4O1xcclxcbiAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5ub2RlX19lbGVtZW50LS1oaWdobGlnaHQge1xcclxcbiAgYW5pbWF0aW9uOiBub2RlSGlnaGxpZ2h0IHZhcigtLWFuaW1hdGlvbi10aW1pbmcpIGVhc2U7XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgbm9kZUhpZ2hsaWdodCB7XFxyXFxuICAwJSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIH1cXHJcXG4gIDI1JSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMzgsIDI0NSwgMjU1KTtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxuICB9XFxyXFxuICA3NSUge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4OCwgMTE3LCAyNDYpO1xcclxcbiAgICBjb2xvcjogIzIxMjUyOTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxcXHJcXG5ib2R5IHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSA+IG1haW4sXFxyXFxuYm9keSA+IC5tYWluIHtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4qIHtcXHJcXG4gIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIHtcXHJcXG4gIG1heC13aWR0aDogNjAwcHg7XFxyXFxuICBtYXJnaW46IGF1dG87XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xcclxcbiAgcGFkZGluZzogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgaDEge1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uYXBwLWNvbnRhaW5lciAuYm94X2NvbnRhaW5lciB7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBoZWlnaHQ6IDMwMHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICBtYXgtd2lkdGg6IDIwMHB4O1xcclxcbiAgbWFyZ2luOiAwIGF1dG87XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIC5ib3gge1xcclxcbiAgb3ZlcmZsb3c6IGF1dG87XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIC5ib3ggLmJveF9pdGVtIHtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcclxcbiAgcGFkZGluZzogNHB4IDgwcHg7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xcclxcbn1cXHJcXG5cXHJcXG4uYXBwLWNvbnRhaW5lciAuYm94IC5ib3hfaXRlbS5wZWVraW5nIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIC5idXR0b25zLWNvbnRhaW5lciB7XFxyXFxuICBtYXgtd2lkdGg6IG1heC1jb250ZW50O1xcclxcbiAgbWFyZ2luOiAzMHB4IGF1dG8gMCBhdXRvO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5pY29uOjpiZWZvcmUge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC12YXJpYW50OiBub3JtYWw7XFxyXFxuICB0ZXh0LXJlbmRlcmluZzogYXV0bztcXHJcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcclxcbn1cXHJcXG5cXHJcXG4uaWNvbi5pY29uLWFycm93LXJpZ2h0OjpiZWZvcmUge1xcclxcbiAgZm9udC1mYW1pbHk6ICdGb250IEF3ZXNvbWUgNSBGcmVlJztcXHJcXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XFxyXFxuICBjb250ZW50OiAnXFxcXGYwNjEnO1xcclxcbn1cXHJcXG5cXHJcXG4uaWNvbi5pY29uLWFycm93LWxlZnQ6OmJlZm9yZSB7XFxyXFxuICBmb250LWZhbWlseTogJ0ZvbnQgQXdlc29tZSA1IEZyZWUnO1xcclxcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXHJcXG4gIGNvbnRlbnQ6ICdcXFxcZjA2MCc7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvZ2xvYmFscy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWixTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBOztFQUVFLFlBQVk7RUFDWixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLHlCQUF5QjtFQUN6QixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIseUJBQXlCO0VBQ3pCLGFBQWE7RUFDYixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGdCQUFnQjtFQUNoQixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIsd0JBQXdCO0VBQ3hCLGFBQWE7RUFDYixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLG9CQUFvQjtFQUNwQixvQkFBb0I7RUFDcEIsbUNBQW1DO0FBQ3JDOztBQUVBO0VBQ0Usa0NBQWtDO0VBQ2xDLGdCQUFnQjtFQUNoQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxrQ0FBa0M7RUFDbEMsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcclxcbmJvZHkge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5ID4gbWFpbixcXHJcXG5ib2R5ID4gLm1haW4ge1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbioge1xcclxcbiAgb3V0bGluZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIge1xcclxcbiAgbWF4LXdpZHRoOiA2MDBweDtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxyXFxuICBwYWRkaW5nOiAzMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYXBwLWNvbnRhaW5lciBoMSB7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIC5ib3hfY29udGFpbmVyIHtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGhlaWdodDogMzAwcHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gIG1heC13aWR0aDogMjAwcHg7XFxyXFxuICBtYXJnaW46IDAgYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgLmJveCB7XFxyXFxuICBvdmVyZmxvdzogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgLmJveCAuYm94X2l0ZW0ge1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxyXFxuICBwYWRkaW5nOiA0cHggODBweDtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XFxyXFxufVxcclxcblxcclxcbi5hcHAtY29udGFpbmVyIC5ib3ggLmJveF9pdGVtLnBlZWtpbmcge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmFwcC1jb250YWluZXIgLmJ1dHRvbnMtY29udGFpbmVyIHtcXHJcXG4gIG1heC13aWR0aDogbWF4LWNvbnRlbnQ7XFxyXFxuICBtYXJnaW46IDMwcHggYXV0byAwIGF1dG87XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmljb246OmJlZm9yZSB7XFxyXFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LXZhcmlhbnQ6IG5vcm1hbDtcXHJcXG4gIHRleHQtcmVuZGVyaW5nOiBhdXRvO1xcclxcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxyXFxufVxcclxcblxcclxcbi5pY29uLmljb24tYXJyb3ctcmlnaHQ6OmJlZm9yZSB7XFxyXFxuICBmb250LWZhbWlseTogJ0ZvbnQgQXdlc29tZSA1IEZyZWUnO1xcclxcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXHJcXG4gIGNvbnRlbnQ6ICdcXFxcZjA2MSc7XFxyXFxufVxcclxcblxcclxcbi5pY29uLmljb24tYXJyb3ctbGVmdDo6YmVmb3JlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnRm9udCBBd2Vzb21lIDUgRnJlZSc7XFxyXFxuICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgY29udGVudDogJ1xcXFxmMDYwJztcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRyZWUge1xcclxcbiAgLS1kYXJrOiAjMzMzO1xcclxcbiAgbWFyZ2luLXRvcDogMzBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBtYXJnaW46IDAgMjBweDtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyZWUgLm5vZGU6bm90KC5ub2RlLS1yb290KSA+IC5ub2RlX19lbGVtZW50OjpiZWZvcmUge1xcclxcbiAgY29udGVudDogJyc7XFxyXFxuICBoZWlnaHQ6IDIwcHg7XFxyXFxuICB3aWR0aDogMXB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjZGNkYztcXHJcXG4gIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgbGVmdDogMDtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgdG9wOiAtMjBweDtcXHJcXG4gIG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLnRyZWUgLm5vZGUubm9kZS0tbGVmdCB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlLm5vZGUtLXJpZ2h0IHtcXHJcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudCB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXHJcXG4gIGhlaWdodDogNDBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigxODgsIDExNywgMjQ2KTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XFxyXFxuICBtaW4td2lkdGg6IDYwcHg7XFxyXFxuICBtYXgtd2lkdGg6IG1heC1jb250ZW50O1xcclxcblxcclxcbiAgcGFkZGluZzogNHB4IDhweDtcXHJcXG4gIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAzMnB4O1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fYm90dG9tLWxpbmUge1xcclxcbiAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgd2lkdGg6IDFweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkY2RjZGM7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlX19lbGVtZW50LFxcclxcbi50cmVlIC5ub2RlX19lbGVtZW50OjpiZWZvcmUsXFxyXFxuLnRyZWUgLm5vZGVfX2NoaWxkcmVuLFxcclxcbi50cmVlIC5ub2RlX19ib3R0b20tbGluZSB7XFxyXFxuICB0cmFuc2l0aW9uOiBhbGwgZWFzZSAwLjJzO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fY2hpbGRyZW4ge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIHBhZGRpbmc6IDIwcHggMDtcXHJcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGNkY2RjO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudDpob3ZlciB7XFxyXFxuICBib3JkZXItY29sb3I6IHZhcigtLWRhcmspO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudDpob3ZlciB+IC5ub2RlX19jaGlsZHJlbiAubm9kZV9fZWxlbWVudDo6YmVmb3JlIHtcXHJcXG4gIHdpZHRoOiAycHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrKTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyZWUgLm5vZGVfX2VsZW1lbnQ6aG92ZXIgfiAubm9kZV9fYm90dG9tLWxpbmUsXFxyXFxuLnRyZWUgLm5vZGVfX2VsZW1lbnQ6aG92ZXIgfiAubm9kZV9fY2hpbGRyZW4gLm5vZGVfX2JvdHRvbS1saW5lIHtcXHJcXG4gIHdpZHRoOiAycHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrKTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyZWUgLm5vZGVfX2VsZW1lbnQ6aG92ZXIgfiAubm9kZV9fY2hpbGRyZW4sXFxyXFxuLnRyZWUgLm5vZGVfX2VsZW1lbnQ6aG92ZXIgfiAubm9kZV9fY2hpbGRyZW4gLm5vZGVfX2NoaWxkcmVuIHtcXHJcXG4gIGJvcmRlci10b3Atd2lkdGg6IDJweDtcXHJcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0tZGFyayk7XFxyXFxufVxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdHJlZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLGNBQWM7RUFDZCxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLFVBQVU7RUFDVix5QkFBeUI7RUFDekIsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixPQUFPO0VBQ1AsUUFBUTtFQUNSLFVBQVU7RUFDVixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixvQ0FBb0M7RUFDcEMsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixzQkFBc0I7O0VBRXRCLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixVQUFVO0VBQ1YseUJBQXlCO0FBQzNCOztBQUVBOzs7O0VBSUUseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGVBQWU7RUFDZiw2QkFBNkI7QUFDL0I7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsNkJBQTZCO0FBQy9COztBQUVBOztFQUVFLFVBQVU7RUFDViw2QkFBNkI7QUFDL0I7O0FBRUE7O0VBRUUscUJBQXFCO0VBQ3JCLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudHJlZSB7XFxyXFxuICAtLWRhcms6ICMzMzM7XFxyXFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIG1hcmdpbjogMCAyMHB4O1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZTpub3QoLm5vZGUtLXJvb3QpID4gLm5vZGVfX2VsZW1lbnQ6OmJlZm9yZSB7XFxyXFxuICBjb250ZW50OiAnJztcXHJcXG4gIGhlaWdodDogMjBweDtcXHJcXG4gIHdpZHRoOiAxcHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGNkY2RjO1xcclxcbiAgZGlzcGxheTogYmxvY2s7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICB0b3A6IC0yMHB4O1xcclxcbiAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZS5ub2RlLS1sZWZ0IHtcXHJcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnRyZWUgLm5vZGUubm9kZS0tcmlnaHQge1xcclxcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlX19lbGVtZW50IHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcclxcbiAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4OCwgMTE3LCAyNDYpO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTZweDtcXHJcXG4gIG1pbi13aWR0aDogNjBweDtcXHJcXG4gIG1heC13aWR0aDogbWF4LWNvbnRlbnQ7XFxyXFxuXFxyXFxuICBwYWRkaW5nOiA0cHggOHB4O1xcclxcbiAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlX19ib3R0b20tbGluZSB7XFxyXFxuICBoZWlnaHQ6IDIwcHg7XFxyXFxuICB3aWR0aDogMXB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RjZGNkYztcXHJcXG59XFxyXFxuXFxyXFxuLnRyZWUgLm5vZGVfX2VsZW1lbnQsXFxyXFxuLnRyZWUgLm5vZGVfX2VsZW1lbnQ6OmJlZm9yZSxcXHJcXG4udHJlZSAubm9kZV9fY2hpbGRyZW4sXFxyXFxuLnRyZWUgLm5vZGVfX2JvdHRvbS1saW5lIHtcXHJcXG4gIHRyYW5zaXRpb246IGFsbCBlYXNlIDAuMnM7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlX19jaGlsZHJlbiB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgcGFkZGluZzogMjBweCAwO1xcclxcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkY2RjZGM7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlX19lbGVtZW50OmhvdmVyIHtcXHJcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0tZGFyayk7XFxyXFxufVxcclxcblxcclxcbi50cmVlIC5ub2RlX19lbGVtZW50OmhvdmVyIH4gLm5vZGVfX2NoaWxkcmVuIC5ub2RlX19lbGVtZW50OjpiZWZvcmUge1xcclxcbiAgd2lkdGg6IDJweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmspO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudDpob3ZlciB+IC5ub2RlX19ib3R0b20tbGluZSxcXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudDpob3ZlciB+IC5ub2RlX19jaGlsZHJlbiAubm9kZV9fYm90dG9tLWxpbmUge1xcclxcbiAgd2lkdGg6IDJweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmspO1xcclxcbn1cXHJcXG5cXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudDpob3ZlciB+IC5ub2RlX19jaGlsZHJlbixcXHJcXG4udHJlZSAubm9kZV9fZWxlbWVudDpob3ZlciB+IC5ub2RlX19jaGlsZHJlbiAubm9kZV9fY2hpbGRyZW4ge1xcclxcbiAgYm9yZGVyLXRvcC13aWR0aDogMnB4O1xcclxcbiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1kYXJrKTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2xvYmFscy5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RyZWUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9qc19iaW5hcnlfc2VhcmNoX3RyZWUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiY29uc3QgQ09NUEFSSVNPTiA9IHtcclxuICBFUVVBTDogMCxcclxuICBTTUFMTEVSOiAtMSxcclxuICBHUkVBVEVSOiAxLFxyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdENvbXBhcmVOdW1iZXJGbiA9IChhLCBiKSA9PiB7XHJcbiAgaWYgKE51bWJlcihhKSA9PSBOdW1iZXIoYikpIHtcclxuICAgIHJldHVybiBDT01QQVJJU09OLkVRVUFMO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIE51bWJlcihhKSA8IE51bWJlcihiKSA/IENPTVBBUklTT04uU01BTExFUiA6IENPTVBBUklTT04uR1JFQVRFUjtcclxufTtcclxuXHJcbmNsYXNzIFRyZWVOb2RlIHtcclxuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgcGFyZW50KSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcclxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50IHx8IG51bGw7XHJcbiAgICB0aGlzLmxlZnQgPSBudWxsO1xyXG4gICAgdGhpcy5yaWdodCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXQgaXNMZWFmKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGVmdCA9PT0gbnVsbCAmJiB0aGlzLnJpZ2h0ID09PSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhhc0NoaWxkcmVuKCkge1xyXG4gICAgcmV0dXJuICF0aGlzLmlzTGVhZjtcclxuICB9XHJcbn1cclxuY2xhc3MgQmluYXJ5U2VhcmNoVHJlZSB7XHJcbiAgcm9vdDtcclxuICBjb21wYXJlRm47XHJcbiAgY29uc3RydWN0b3IoY29tcGFyZUZuID0gZGVmYXVsdENvbXBhcmVOdW1iZXJGbikge1xyXG4gICAgdGhpcy5yb290ID0gbnVsbDtcclxuICAgIHRoaXMuY29tcGFyZUZuID0gY29tcGFyZUZuO1xyXG4gIH1cclxuXHJcbiAgaW5zZXJ0KHZhbHVlKSB7XHJcbiAgICBsZXQgbm9kZSA9IHRoaXMucm9vdDtcclxuICAgIGxldCBpbnNlcnRlZE5vZGU7XHJcbiAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnJvb3QgPSBuZXcgVHJlZU5vZGUodmFsdWUpO1xyXG4gICAgICByZXR1cm4gdGhpcy5yb290O1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm9kZUluc2VydGVkID0gKCgpID0+IHtcclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBjb25zdCBjb21wYXJpc29uID0gdGhpcy5jb21wYXJlRm4odmFsdWUsIG5vZGUudmFsdWUpO1xyXG4gICAgICAgIGlmIChjb21wYXJpc29uID09PSBDT01QQVJJU09OLkVRVUFMKSB7XHJcbiAgICAgICAgICBpbnNlcnRlZE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wYXJpc29uID09PSBDT01QQVJJU09OLlNNQUxMRVIpIHtcclxuICAgICAgICAgIGlmIChub2RlLmxlZnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaW5zZXJ0ZWROb2RlID0gbmV3IFRyZWVOb2RlKHZhbHVlLCBub2RlKTtcclxuICAgICAgICAgICAgbm9kZS5sZWZ0ID0gaW5zZXJ0ZWROb2RlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb21wYXJpc29uID09PSBDT01QQVJJU09OLkdSRUFURVIpIHtcclxuICAgICAgICAgIGlmIChub2RlLnJpZ2h0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGluc2VydGVkTm9kZSA9IG5ldyBUcmVlTm9kZSh2YWx1ZSwgbm9kZSk7XHJcbiAgICAgICAgICAgIG5vZGUucmlnaHQgPSBpbnNlcnRlZE5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KSgpO1xyXG4gICAgaWYgKG5vZGVJbnNlcnRlZCkge1xyXG4gICAgICByZXR1cm4gaW5zZXJ0ZWROb2RlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKHZhbHVlLCBub2RlKSB7XHJcbiAgICBub2RlID0gbm9kZSA/IG5vZGUgOiB0aGlzLnNlYXJjaCh2YWx1ZSk7XHJcbiAgICBpZiAoIW5vZGUpIHJldHVybiBudWxsO1xyXG5cclxuICAgIGNvbnN0IG5vZGVJc1Jvb3QgPSBub2RlLnBhcmVudCA9PT0gbnVsbDtcclxuICAgIGNvbnN0IGhhc0JvdGhDaGlsZHJlbiA9IG5vZGUubGVmdCAhPT0gbnVsbCAmJiBub2RlLnJpZ2h0ICE9PSBudWxsO1xyXG4gICAgY29uc3QgaXNMZWZ0Q2hpbGQgPSAhbm9kZUlzUm9vdCA/IG5vZGUucGFyZW50LmxlZnQgPT09IG5vZGUgOiBmYWxzZTtcclxuXHJcbiAgICBpZiAobm9kZS5pc0xlYWYpIHtcclxuICAgICAgaWYgKG5vZGVJc1Jvb3QpIHtcclxuICAgICAgICB0aGlzLnJvb3QgPSBudWxsO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzTGVmdENoaWxkKSB7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQubGVmdCA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQucmlnaHQgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG4gICAgaWYgKCFoYXNCb3RoQ2hpbGRyZW4pIHtcclxuICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmxlZnQgIT09IG51bGwgPyBub2RlLmxlZnQgOiBub2RlLnJpZ2h0O1xyXG4gICAgICBpZiAobm9kZUlzUm9vdCkge1xyXG4gICAgICAgIHRoaXMucm9vdCA9IGNoaWxkO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzTGVmdENoaWxkKSB7XHJcbiAgICAgICAgbm9kZS5wYXJlbnQubGVmdCA9IGNoaWxkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5vZGUucGFyZW50LnJpZ2h0ID0gY2hpbGQ7XHJcbiAgICAgIH1cclxuICAgICAgY2hpbGQucGFyZW50ID0gbm9kZS5wYXJlbnQ7XHJcbiAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1pblJpZ2h0TGVhZiA9IHRoaXMubWluKG5vZGUucmlnaHQpO1xyXG4gICAgaWYgKG1pblJpZ2h0TGVhZi5wYXJlbnQubGVmdCA9PT0gbWluUmlnaHRMZWFmKSB7XHJcbiAgICAgIG1pblJpZ2h0TGVhZi5wYXJlbnQubGVmdCA9IG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtaW5SaWdodExlYWYucGFyZW50LnJpZ2h0ID0gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IGNsb25lID0geyAuLi5ub2RlIH07XHJcbiAgICBub2RlLnZhbHVlID0gbWluUmlnaHRMZWFmLnZhbHVlO1xyXG4gICAgcmV0dXJuIGNsb25lO1xyXG4gIH1cclxuICBzZWFyY2godmFsdWUpIHtcclxuICAgIHJldHVybiB0aGlzLnBvc3RPcmRlclRyYXZlcnNlKCkuZmluZCgobm9kZSkgPT4gbm9kZS52YWx1ZSA9PT0gdmFsdWUpO1xyXG4gIH1cclxuICBtaW4obm9kZSA9IHRoaXMucm9vdCkge1xyXG4gICAgbGV0IGN1cnJlbnQgPSBub2RlO1xyXG4gICAgd2hpbGUgKGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC5sZWZ0ICE9PSBudWxsKSB7XHJcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmxlZnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VycmVudDtcclxuICB9XHJcbiAgbWF4KG5vZGUgPSB0aGlzLnJvb3QpIHtcclxuICAgIGxldCBjdXJyZW50ID0gbm9kZTtcclxuICAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsICYmIGN1cnJlbnQucmlnaHQgIT09IG51bGwpIHtcclxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucmlnaHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VycmVudDtcclxuICB9XHJcbiAgaW5PcmRlclRyYXZlcnNlKG5vZGUgPSB0aGlzLnJvb3QsIHRyYXZlcnNlZCA9IFtdKSB7XHJcbiAgICBpZiAobm9kZSA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gdHJhdmVyc2VkO1xyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUubGVmdCkge1xyXG4gICAgICB0cmF2ZXJzZWQucHVzaCguLi50aGlzLmluT3JkZXJUcmF2ZXJzZShub2RlLmxlZnQpKTtcclxuICAgIH1cclxuICAgIHRyYXZlcnNlZC5wdXNoKG5vZGUpO1xyXG4gICAgaWYgKG5vZGUucmlnaHQpIHtcclxuICAgICAgdHJhdmVyc2VkLnB1c2goLi4udGhpcy5pbk9yZGVyVHJhdmVyc2Uobm9kZS5yaWdodCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYXZlcnNlZDtcclxuICB9XHJcbiAgcHJlT3JkZXJUcmF2ZXJzZShub2RlID0gdGhpcy5yb290LCB0cmF2ZXJzZWQgPSBbXSkge1xyXG4gICAgaWYgKG5vZGUgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIHRyYXZlcnNlZDtcclxuICAgIH1cclxuICAgIHRyYXZlcnNlZC5wdXNoKG5vZGUpO1xyXG4gICAgaWYgKG5vZGUubGVmdCkge1xyXG4gICAgICB0cmF2ZXJzZWQucHVzaCguLi50aGlzLnByZU9yZGVyVHJhdmVyc2Uobm9kZS5sZWZ0KSk7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5yaWdodCkge1xyXG4gICAgICB0cmF2ZXJzZWQucHVzaCguLi50aGlzLnByZU9yZGVyVHJhdmVyc2Uobm9kZS5yaWdodCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYXZlcnNlZDtcclxuICB9XHJcbiAgcG9zdE9yZGVyVHJhdmVyc2Uobm9kZSA9IHRoaXMucm9vdCwgdHJhdmVyc2VkID0gW10pIHtcclxuICAgIGlmIChub2RlID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB0cmF2ZXJzZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5sZWZ0KSB7XHJcbiAgICAgIHRyYXZlcnNlZC5wdXNoKC4uLnRoaXMucG9zdE9yZGVyVHJhdmVyc2Uobm9kZS5sZWZ0KSk7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5yaWdodCkge1xyXG4gICAgICB0cmF2ZXJzZWQucHVzaCguLi50aGlzLnBvc3RPcmRlclRyYXZlcnNlKG5vZGUucmlnaHQpKTtcclxuICAgIH1cclxuICAgIHRyYXZlcnNlZC5wdXNoKG5vZGUpO1xyXG4gICAgcmV0dXJuIHRyYXZlcnNlZDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJpbmFyeVNlYXJjaFRyZWU7XHJcbiIsImNvbnN0IEhJR0hMSUdIVF9DTEFTUyA9ICdub2RlX19lbGVtZW50LS1oaWdobGlnaHQnO1xyXG5jb25zdCBISUdITElHSFRfVElNRSA9IDMwMDtcclxubGV0IGhpZ2hsaWdodFRpbWVyID0gbnVsbDtcclxuXHJcbmNvbnN0IHRyYXZlcnNlVUlOb2RlcyA9IChub2RlcykgPT4ge1xyXG4gIG5vZGVzLnJlZHVjZSgocHIsIG5vZGUpID0+IHtcclxuICAgIHJldHVybiBwci50aGVuKCgpID0+IGhpZ2hsaWdodE5vZGUobm9kZSkpO1xyXG4gIH0sIFByb21pc2UucmVzb2x2ZSgpKTtcclxufTtcclxuXHJcbmNvbnN0IGhpZ2hsaWdodE5vZGUgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAgY29uc3Qgbm9kZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1ub2RlLWlkPVwiJHt2YWx1ZX1cIl1gKTtcclxuICBpZiAoaGlnaGxpZ2h0VGltZXIgIT09IG51bGwpIHtcclxuICAgIGNsZWFyVGltZW91dChoaWdobGlnaHRUaW1lcik7XHJcbiAgICBub2RlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEhJR0hMSUdIVF9DTEFTUyk7XHJcbiAgICBoaWdobGlnaHRUaW1lciA9IG51bGw7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKG5vZGVFbGVtZW50KTtcclxuICBub2RlRWxlbWVudC5jbGFzc0xpc3QuYWRkKEhJR0hMSUdIVF9DTEFTUyk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykuZm9yRWFjaCgoYnRuKSA9PiB7XHJcbiAgICBidG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gIH0pO1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgaGlnaGxpZ2h0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgbm9kZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShISUdITElHSFRfQ0xBU1MpO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKS5mb3JFYWNoKChidG4pID0+IHtcclxuICAgICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xyXG4gICAgICB9KTtcclxuICAgICAgaGlnaGxpZ2h0VGltZXIgPSBudWxsO1xyXG4gICAgICByZXNvbHZlKCk7XHJcbiAgICB9LCBISUdITElHSFRfVElNRSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBpbml0aWF0ZUhhbmRsZXJzID0gKHRyZWUsIHJlbmRlcikgPT4ge1xyXG4gIGNvbnN0IGluc2VydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnNlcnRCdG4nKTtcclxuICBjb25zdCByZW1vdmVFbGVtZW50QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JlbW92ZUVsZW1lbnRCdG4nKTtcclxuICBjb25zdCBtaW5WYWx1ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtaW5WYWx1ZUJ0bicpO1xyXG4gIGNvbnN0IG1heFZhbHVlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21heFZhbHVlQnRuJyk7XHJcbiAgY29uc3Qgc2VhcmNoQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaEJ0bicpO1xyXG4gIGNvbnN0IHByZU9yZGVyVHJhdkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcmVPcmRlclRyYXZCdG4nKTtcclxuICBjb25zdCBpbk9yZGVyVHJhdkJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbk9yZGVyVHJhdkJ0bicpO1xyXG4gIGNvbnN0IHBvc3RPcmRlclRyYXZCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9zdE9yZGVyVHJhdkJ0bicpO1xyXG4gIGNvbnN0IHJlc2V0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Jlc2V0QnRuJyk7XHJcbiAgcmVtb3ZlRWxlbWVudEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBwcm9tcHQoJ0VudGVyIGVsZW1lbnQgdG8gcmVtb3ZlIGZyb20gdGhlIHRyZWUnKTtcclxuICAgIGNvbnN0IHJlbW92ZWRFbCA9IHRyZWUucmVtb3ZlKGVsZW1lbnQpO1xyXG4gICAgaWYgKHJlbW92ZWRFbCkge1xyXG4gICAgICBoaWdobGlnaHROb2RlKHJlbW92ZWRFbCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmVuZGVyKHRyZWUucm9vdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWxlcnQoJ0VsZW1lbnQgbm90IGZvdW5kJyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgaW5zZXJ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IHByb21wdCgnRW50ZXIgZWxlbWVudCB0byBhZGQgdG8gdHJlZScpO1xyXG4gICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vZGUgPSB0cmVlLmluc2VydChlbGVtZW50KTtcclxuICAgIHJlbmRlcih0cmVlLnJvb3QpO1xyXG4gICAgaGlnaGxpZ2h0Tm9kZShub2RlKTtcclxuICB9KTtcclxuICBtaW5WYWx1ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IG5vZGUgPSB0cmVlLm1pbigpO1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgaGlnaGxpZ2h0Tm9kZShub2RlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFsZXJ0KCdOb2RlIG5vdCBmb3VuZCcpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHNlYXJjaEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IHNlYXJjaFZhbCA9IHByb21wdCgnRW50ZXIgdGhlIG5vZGUgdmFsdWUgdG8gc2VhcmNoIGluIHRoZSB0cmVlJyk7XHJcbiAgICBjb25zdCBzZWFyY2hlZE5vZGUgPSB0cmVlLnNlYXJjaChzZWFyY2hWYWwpO1xyXG4gICAgaWYgKHNlYXJjaGVkTm9kZSkge1xyXG4gICAgICBoaWdobGlnaHROb2RlKHNlYXJjaGVkTm9kZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhbGVydCgnTm9kZSBub3QgZm91bmQnKTtcclxuICAgIH1cclxuICB9KTtcclxuICBtYXhWYWx1ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IG5vZGUgPSB0cmVlLm1heCgpO1xyXG4gICAgaWYgKG5vZGUpIHtcclxuICAgICAgaGlnaGxpZ2h0Tm9kZShub2RlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFsZXJ0KCdOb2RlIG5vdCBmb3VuZCcpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHByZU9yZGVyVHJhdkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvbnN0IGFycmF5ID0gdHJlZS5wcmVPcmRlclRyYXZlcnNlKCk7XHJcbiAgICB0cmF2ZXJzZVVJTm9kZXMoYXJyYXkpO1xyXG4gICAgY29uc29sZS5sb2coYXJyYXkpO1xyXG4gIH0pO1xyXG4gIGluT3JkZXJUcmF2QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY29uc3QgYXJyYXkgPSB0cmVlLmluT3JkZXJUcmF2ZXJzZSgpO1xyXG4gICAgdHJhdmVyc2VVSU5vZGVzKGFycmF5KTtcclxuICAgIGNvbnNvbGUubG9nKGFycmF5KTtcclxuICB9KTtcclxuICBwb3N0T3JkZXJUcmF2QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY29uc3QgYXJyYXkgPSB0cmVlLnBvc3RPcmRlclRyYXZlcnNlKCk7XHJcbiAgICB0cmF2ZXJzZVVJTm9kZXMoYXJyYXkpO1xyXG4gICAgY29uc29sZS5sb2coYXJyYXkpO1xyXG4gIH0pO1xyXG4gIHJlc2V0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgaGlnaGxpZ2h0Tm9kZSh0cmVlLnJvb3QpLnRoZW4oKCkgPT4ge1xyXG4gICAgICB0cmVlLnJvb3QgPSBudWxsO1xyXG4gICAgICByZW5kZXIodHJlZS5yb290KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufTtcclxuXHJcbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbnJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tYW5pbWF0aW9uLXRpbWluZycsIGAke0hJR0hMSUdIVF9USU1FIC8gMTAwMH1zYCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0aWF0ZUhhbmRsZXJzO1xyXG4iLCJpbXBvcnQgJ0BzdHlsZXMvZ2xvYmFscy5jc3MnO1xyXG5pbXBvcnQgJ0BzdHlsZXMvdHJlZS5jc3MnO1xyXG5pbXBvcnQgJy4vanNfYmluYXJ5X3NlYXJjaF90cmVlLmNzcyc7XHJcbmltcG9ydCBCaW5hcnlTZWFyY2hUcmVlIGZyb20gJy4vanNfYmluYXJ5X3NlYXJjaF90cmVlJztcclxuaW1wb3J0IGluaXRpYXRlSGFuZGxlcnMgZnJvbSAnLi9ic3QtdWknO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlckJpbmFyeVNlYXJjaFRyZWUgPSAobm9kZSkgPT4ge1xyXG4gIGlmICghbm9kZSkge1xyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICBjb25zdCB7IGxlZnQsIHJpZ2h0LCB2YWx1ZSB9ID0gbm9kZTtcclxuICByZXR1cm4gYFxyXG4gICAgPGRpdiBjbGFzcz1cIm5vZGVfX2VsZW1lbnRcIiBkYXRhLW5vZGUtaWQ9XCIke3ZhbHVlfVwiPiR7dmFsdWV9PC9kaXY+XHJcbiAgICAke1xyXG4gICAgICBsZWZ0IHx8IHJpZ2h0XHJcbiAgICAgICAgPyBgXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZV9fYm90dG9tLWxpbmVcIj48L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJub2RlX19jaGlsZHJlblwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGUgbm9kZS0tbGVmdFwiPlxyXG4gICAgICAgICAgJHtsZWZ0ID8gcmVuZGVyQmluYXJ5U2VhcmNoVHJlZShsZWZ0KSA6ICcnfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibm9kZSBub2RlLS1yaWdodFwiPlxyXG4gICAgICAgICAgJHtyaWdodCA/IHJlbmRlckJpbmFyeVNlYXJjaFRyZWUocmlnaHQpIDogJyd9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgXHJcbiAgICAgICAgOiAnJ1xyXG4gICAgfVxyXG4gIGA7XHJcbn07XHJcblxyXG5jb25zdCBteVRyZWUgPSBuZXcgQmluYXJ5U2VhcmNoVHJlZSgpO1xyXG5cclxubXlUcmVlLmluc2VydCgxMSk7XHJcbm15VHJlZS5pbnNlcnQoNyk7XHJcbm15VHJlZS5pbnNlcnQoNSk7XHJcbm15VHJlZS5pbnNlcnQoMyk7XHJcbm15VHJlZS5pbnNlcnQoNik7XHJcbm15VHJlZS5pbnNlcnQoOSk7XHJcbm15VHJlZS5pbnNlcnQoOCk7XHJcbm15VHJlZS5pbnNlcnQoMTApO1xyXG5teVRyZWUuaW5zZXJ0KDE1KTtcclxuY29uc29sZS5sb2cobXlUcmVlLmluc2VydCgxMykpO1xyXG5teVRyZWUuaW5zZXJ0KDEyKTtcclxubXlUcmVlLmluc2VydCgxNCk7XHJcbm15VHJlZS5pbnNlcnQoMjApO1xyXG5teVRyZWUuaW5zZXJ0KDE4KTtcclxubXlUcmVlLmluc2VydCgyNSk7XHJcbmNvbnNvbGUubG9nKCdpbk9yZGVyVHJhdmVyc2UnKTtcclxuY29uc29sZS5sb2cobXlUcmVlLmluT3JkZXJUcmF2ZXJzZSgpKTtcclxuY29uc29sZS5sb2coJ3ByZU9yZGVyVHJhdmVyc2UnKTtcclxuY29uc29sZS5sb2cobXlUcmVlLnByZU9yZGVyVHJhdmVyc2UoKSk7XHJcbmNvbnNvbGUubG9nKCdwb3N0T3JkZXJUcmF2ZXJzZScpO1xyXG5jb25zb2xlLmxvZyhteVRyZWUucG9zdE9yZGVyVHJhdmVyc2UoKSk7XHJcbmNvbnNvbGUubG9nKCdtaW4nLCBteVRyZWUubWluKCkpO1xyXG5jb25zb2xlLmxvZygnbWF4JywgbXlUcmVlLm1heCgpKTtcclxuY29uc29sZS5sb2cobXlUcmVlLnNlYXJjaCgxMikpO1xyXG5cclxuY29uc3QgcmVSZW5kZXIgPSAodHJlZSwgcmVuZGVyKSA9PiB7XHJcbiAgY29uc3QgdHJlZURPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHJlZScpO1xyXG4gIHRyZWVET01FbGVtZW50LmlubmVySFRNTCA9IHJlbmRlcih0cmVlLnJvb3QpO1xyXG59O1xyXG5cclxuY29uc3QgbWFpbiA9ICgpID0+IHtcclxuICBjb25zb2xlLmxvZygndHJlZURhdGEnLCBteVRyZWUpO1xyXG4gIHJlUmVuZGVyKG15VHJlZSwgcmVuZGVyQmluYXJ5U2VhcmNoVHJlZSk7XHJcbiAgY29uc3QgdHJlZURPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHJlZScpO1xyXG4gIHRyZWVET01FbGVtZW50LmlubmVySFRNTCA9IHJlbmRlckJpbmFyeVNlYXJjaFRyZWUobXlUcmVlLnJvb3QpO1xyXG4gIGluaXRpYXRlSGFuZGxlcnMobXlUcmVlLCAoKSA9PiB7XHJcbiAgICByZVJlbmRlcihteVRyZWUsIHJlbmRlckJpbmFyeVNlYXJjaFRyZWUpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxubWFpbigpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9